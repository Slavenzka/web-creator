{"version":3,"sources":["components/Header/Header.module.scss","components/Grid/Container.module.scss","components/Grid/Container.js","components/Header/Header.js","components/Slider/Slider.js","components/Info/Info.js","components/Form/Form.js","Pages/PageMain/PageMain.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","children","className","css","wrapper","Header","header","title","Component","Slider","Info","Form","PageMain","state","data","axios","get","then","response","setState","this","console","log","Footer","App","path","exact","component","Boolean","window","location","hostname","match","Page","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,mBCA1DD,EAAOC,QAAU,CAAC,QAAU,6B,6SCUbC,EARG,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,OACE,yBAAKC,UAAWC,IAAIC,SACjBH,ICYQI,E,iLAZX,OACE,4BAAQH,UAAWC,IAAIG,QACrB,kBAAC,EAAD,KACE,wBAAIJ,UAAWC,IAAII,OAAnB,qG,GALWC,a,yBCSNC,E,iLARX,OACE,yBAAKP,UAAWC,IAAIC,SAApB,c,GAHeI,a,iBCQNE,EARF,WACX,OACE,yBAAKR,UAAWC,IAAIC,SAApB,e,iBCQWO,E,iLARX,OACE,yBAAKT,UAAWC,IAAIC,SAApB,Y,GAHaI,a,iBC4BJI,E,2MAxBbC,MAAQ,CACNC,KAAM,M,mFAGc,IAAD,OACnBC,IAAMC,IAAI,oBACPC,MAAK,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAC9BL,KAAMI,EAASJ,Y,+BAIV,IACDA,EAASM,KAAKP,MAAdC,KAER,OADAO,QAAQC,IAAIR,GAEV,8BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAnBeN,a,iBCKRe,EARA,WACb,OACE,yBAAKrB,UAAWC,IAAIC,SAApB,WCaWoB,MAZf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWf,KAEnC,kBAAC,EAAD,QCDcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVAC,EACJ,kBAAC,IAAD,KACE,kBAAC,EAAD,OAIJC,IAASC,OAAOF,EAAMG,SAASC,eAAe,SDqHxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.05942708.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__358ji\",\"title\":\"Header_title__1rRQ6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Container_wrapper__rC9pi\"};","import React from 'react';\r\nimport css from './Container.module.scss';\r\n\r\nconst Container = ({ children }) => {\r\n  return (\r\n    <div className={css.wrapper}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Container;\r\n","import React, { Component } from 'react';\r\nimport css from './Header.module.scss'\r\nimport Container from 'components/Grid/Container'\r\n\r\nclass Header extends Component {\r\n  render () {\r\n    return (\r\n      <header className={css.header}>\r\n        <Container>\r\n          <h1 className={css.title}>\r\n            Тестовое задание\r\n          </h1>\r\n        </Container>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react'\r\nimport css from './Slider.module.scss'\r\n\r\nclass Slider extends Component {\r\n  render () {\r\n    return (\r\n      <div className={css.wrapper}>\r\n        Slider\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Slider\r\n","import React from 'react';\r\nimport css from './Info.module.scss'\r\n\r\nconst Info = () => {\r\n  return (\r\n    <div className={css.wrapper}>\r\n      Info block\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Info;\r\n","import React, { Component } from 'react'\r\nimport css from './Form.module.scss'\r\n\r\nclass Form extends Component {\r\n  render () {\r\n    return (\r\n      <div className={css.wrapper}>\r\n        Form\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Form\r\n","import React, { Component } from 'react'\r\nimport Slider from 'components/Slider/Slider'\r\nimport Info from 'components/Info/Info'\r\nimport Form from 'components/Form/Form'\r\nimport axios from 'axios'\r\n\r\nclass PageMain extends Component {\r\n  state = {\r\n    data: null\r\n  }\r\n\r\n  componentDidMount () {\r\n    axios.get('server/data.json')\r\n      .then(response => this.setState({\r\n        data: response.data\r\n      }))\r\n  }\r\n\r\n  render () {\r\n    const { data } = this.state\r\n    console.log(data);\r\n    return (\r\n      <main>\r\n        <Slider />\r\n        <Info />\r\n        <Form />\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PageMain\r\n","import React from 'react'\r\nimport css from './Footer.module.scss'\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className={css.wrapper}>\r\n      Footer\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react';\nimport Header from 'components/Header/Header'\nimport { Switch, Route } from 'react-router-dom'\nimport PageMain from 'Pages/PageMain/PageMain'\nimport Footer from 'components/Footer/Footer'\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Switch>\n        <Route path='/' exact component={PageMain} />\n      </Switch>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css'\nimport 'styles/common.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst Page = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(Page, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}